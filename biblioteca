/*Implemente um programa, para gerenciamento de uma bibliteca, utilizando a estrutura de objetos. O programa deverá
 conter 3 vetores (livros, usuario, emprestimos) 
que deverão armazenar as informações contidas nos objetos.
Este programa deverá conter as seguintes fuções:
O programa deverá conter:

- Uma função para receber cadastro de livros, considerando armazenamento de um objeto com os 
seguintes atributos:  id, titulo, autor, ano, paginas, editora, status de empréstimo. OK

- Uma função para receber o cadastro de usuários, armazenamento de um objeto com os 
seguintes atributos: id, nomeCompleto, cpf, endereco, cidade, escola.  OK

- Uma função para emprestar livros: Esta função devrá receber o nome e id do usuário e o nome do livro.
 Se o livro existir no vetor de livros e estiver com o status "disponível", poderá ser emprestado (alterar o status do livro),
  caso contrário, deverá retornar a mensagem "Livro já emprestado".

- Uma função para devolução de livros: Esta função deverá receber o nome do livro.
 Se estiver com o status emprestado, deverá alterar o status para 'disponivel' 
 e exibir uma mensagem de confirmação de devolução. 

- Uma função que apresenta a relação de livros disponíveis na biblioteca (apresentado: nome do livro, autor e status)OK; 

- Uma função que apresenta os livros com status "emprestado".

DESAFIO: Funções de exclusão de livros e usuário. */

const readline = require("readline-sync");

let clientes = [];
const agenciaConta = "1014-0";

function cadastroCliente(nomeCliente, sobNomeCliente, senhaConta, saldoInicial, rendaMensal) {
    clientes.push({
        id: retornaId(),
        nome: nomeCliente,
        sobrenome: sobNomeCliente,
        agencia: agenciaConta,
        conta: criaConta(),
        senha: senhaConta,
        saldoInicial: saldoInicial,
        rendaMensal: rendaMensal
    });
}

function retornaId() {
    return clientes.length + 100;
}

function criaConta() {
    return clientes.length + 10000;
}

function excluirCliente(contaCliente, senhaConta) {
    let existeCliente = false;
    let indexCliente;

    for (let i = 0; i < clientes.length; i++) {
        if (clientes[i].conta === contaCliente && clientes[i].senha === senhaConta) {
            indexCliente = i;
            existeCliente = true;
            console.log("Cliente encontrado!");
            break;
        }
    }

    if (existeCliente) {
        clientes.splice(indexCliente, 1);
        console.log("Cliente excluído com sucesso!");
    } else {
        console.log("Cliente não encontrado!");
    }
}

function deposito() {
    const contaCliente = readline.questionInt("Informe o número da sua conta: ");
    const senhaConta = readline.questionInt("Digite sua senha: ");

    for (let i = 0; i < clientes.length; i++) {
        if (clientes[i].conta === contaCliente && clientes[i].senha === senhaConta) {
            console.log("Os dados digitados estão corretos.");
            const valorDeposito = readline.questionInt("Digite o valor a ser depositado: ");
            clientes[i].saldoInicial += valorDeposito;
            console.log(`Depósito realizado com sucesso, seu saldo atual é de R$${clientes[i].saldoInicial}`);
            return; // Encerra a função após o depósito
        }
    }

    console.log("Conta não encontrada. Digite novamente");
}

function saque() {
    const contaCliente = readline.questionInt("Informe o número da sua conta: ");
    const senhaConta = readline.questionInt("Digite sua senha: ");

    for (let i = 0; i < clientes.length; i++) {
        if (clientes[i].conta === contaCliente && clientes[i].senha === senhaConta) {
            console.log("Os dados digitados estão corretos.");
            const valorSaque = readline.questionInt("Digite o valor a ser sacado: ");
            if (valorSaque > clientes[i].saldoInicial) {
                console.log("Saldo insuficiente. Seu saldo atual é de R$" + clientes[i].saldoInicial);
            } else {
                clientes[i].saldoInicial -= valorSaque;
                console.log(`Saque realizado com sucesso, seu saldo atual é de R$${clientes[i].saldoInicial}`);
            }
            return; // Encerra a função após o saque
        }
    }

    console.log("Conta não encontrada. Digite novamente");
}

function extrato() {
    const contaCliente = readline.questionInt("Informe o número da sua conta: ");
    const senhaConta = readline.questionInt("Digite sua senha: ");

    for (let i = 0; i < clientes.length; i++) {
        if (clientes[i].conta === contaCliente && clientes[i].senha === senhaConta) {
            console.log(`Nome: ${clientes[i].nome} ${clientes[i].sobrenome}`);
            console.log(`Agência: ${clientes[i].agencia}`);
            console.log(`Conta: ${clientes[i].conta}`);
            console.log(`Saldo Atual: R$${clientes[i].saldoInicial}`);
            return; // Encerra a função após mostrar o extrato
        }
    }

    console.log("Conta não encontrada. Digite novamente");
}

function emprestimo() {
    const contaCliente = readline.questionInt("Informe o número da sua conta: ");
    const valorEmprestimo = readline.questionInt("Informe o valor do empréstimo: ");
    const parcelas = readline.questionInt("Informe a quantidade de parcelas: ");

    for (let i = 0; i < clientes.length; i++) {
        if (clientes[i].conta === contaCliente) {
            const juros = 0.05;
            const valorComJuros = valorEmprestimo * (1 + juros);
            const prestacao = valorComJuros / parcelas;

            if (prestacao > 0.2 * clientes[i].rendaMensal) {
                console.log("Empréstimo não concedido. Prestação superior a 20% da renda mensal.");
            } else {
                console.log(`Empréstimo concedido. Valor mensal a ser pago: R$${prestacao.toFixed(2)}`);
                console.log(`Total a ser pago: R$${valorComJuros.toFixed(2)}`);
                console.log(`Quantidade de parcelas: ${parcelas}`);
            }
            return;
        }
    }

    console.log("Conta não encontrada. Digite novamente");
}

function menu() {
    console.log("******************************************");
    console.log("******* BEM VINDO AO BANCO TWO TWO *******");
    console.log("******************************************");
    console.log('*** MENU DE ACESSO ***');
    console.log('1: DEPÓSITO.');
    console.log('2: SAQUE.');
    console.log('3: EXTRATO.');
    console.log('4: EMPRÉSTIMO.');
    console.log('0: ENCERRAR PROGRAMA.');

    const opcao = readline.questionInt('Digite uma opção: ');


    switch (opcao) {
        case 2:
            saque();
            break;
        case 3:
            extrato();
            break;
        case 4:
            emprestimo();
            break;
        case 300:
            let nomeCliente = readline.question("Digite seu primeiro nome: ");
            let sobNomeCliente = readline.question("Digite seu sobrenome: ");
            let senhaConta = readline.questionInt("Digite sua senha: ");
            let rendaMensal = readline.questionFloat("Digite sua renda mensal: ");
            let saldoInicial = readline.questionInt("Digite quanto deseja aplicar: ");
            cadastroCliente(nomeCliente, sobNomeCliente, senhaConta, saldoInicial, rendaMensal);
            console.log(`Conta cadastrada com sucesso! 
            Bem-vindo - ${nomeCliente}!
            Os dados da sua conta são: Agência: ${agenciaConta}.
            Conta: ${criaConta()}
            Saldo inicial de R$ ${saldoInicial}.`);
            break;
        case 400:
            let contaClienteExcluir = readline.questionInt("Digite a conta a ser excluída: ");
            let senhaContaExcluir = readline.questionInt("Digite a senha da conta que será excluída: ");
            excluirCliente(contaClienteExcluir, senhaContaExcluir);
            break;
        case 1:
            deposito();
            break;
        case 0:
            process.exit(0);
        default:
            console.log("Opção inválida. Tente novamente.");
    }
}

while (true) {
    menu();
}
